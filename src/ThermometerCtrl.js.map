{"version":3,"sources":["../src/ThermometerCtrl.js"],"names":["_","$","rendering","kbn","config","TimeSeries","MetricsPanelCtrl","ThermometerCtrl","$scope","$injector","$rootScope","series","panelDefaults","links","datasource","cacheTimeout","nullPointMode","format","valueName","fontSize","minValue","maxValue","thresholds","colorGauge","colorValue","colors","defaults","panel","valueNameOptions","value","text","events","on","onDataReceived","bind","onDataError","onInitEditMode","fontSizes","addEditorTab","unitFormats","getUnitFormats","subItem","render","dataList","data","length","type","dataType","tableData","map","tableHandler","setTableValues","seriesHandler","setValues","valueFormatted","dataPoints","columnNames","columns","forEach","column","columnIndex","tableColumnOptions","find","tableColumn","col","rows","row","dataPoint","key","push","undefined","datapoint","isString","escape","valueRounded","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","decimals","scaledDecimals","roundValue","flotpairs","error","Error","message","JSON","stringify","lastPoint","last","datapoints","lastValue","isArray","alias","stats","seriesData","target","getFlotPairs","isNumber","delta","dec","Math","floor","log","LN10","magn","pow","norm","size","max","result","panelColorIndex","color","split","isFinite","i","first","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"ThermometerCtrl.js","sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\n\nimport rendering from './rendering';\n\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nexport class ThermometerCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    this.series = [];\n\n    const panelDefaults = {\n      links: [],\n      datasource: null,\n      cacheTimeout: null,\n      nullPointMode: 'connected',\n      format: 'none',\n      valueName: 'current',\n      fontSize: '100%',\n      minValue: -20,\n      maxValue: 50,\n      thresholds: '-10,0,15,25',\n      colorGauge: true,\n      colorValue: false,\n      colors: [\n        \"rgb(0, 0, 255)\",\n        \"rgb(0, 255, 255)\",\n        \"rgb(0, 255, 0)\",\n        \"rgb(255, 255, 0)\",\n        \"rgb(255, 128, 0)\"\n      ]  \n    };\n    _.defaults(this.panel, panelDefaults);\n    \n    this.valueNameOptions = [\n      {value : 'min', text: 'Min'},\n      {value : 'max', text: 'Max'},\n      {value : 'avg', text: 'Average'},\n      {value : 'current', text: 'Current'},\n      {value : 'total', text: 'Total'},\n      {value : 'name', text: 'Name'},\n      {value : 'first', text: 'First'},\n      {value : 'delta', text: 'Delta'},\n      {value : 'diff', text: 'Difference'},\n      {value : 'range', text: 'Range'},\n      {value : 'last_time', text: 'Time of last point'}\n    ];\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\n    this.addEditorTab('Options', 'public/plugins/grapekh-thermometer-panel/editor.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    const data = {};\n    if (dataList.length > 0 && dataList[0].type === 'table') {\n      this.dataType = 'table';\n      const tableData = dataList.map(this.tableHandler.bind(this));\n      this.setTableValues(tableData, data);\n    } else {\n      this.dataType = 'timeseries';\n      this.series = dataList.map(this.seriesHandler.bind(this));\n      this.setValues(data);\n    }\n    \n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = \"no value\";\n    }\n\n    this.data = data;\n    this.render();\n  }\n\n  tableHandler(tableData) {\n    const dataPoints = [];\n    const columnNames = {};\n\n    tableData.columns.forEach((column, columnIndex) => {\n      columnNames[columnIndex] = column.text;\n    });\n\n    this.tableColumnOptions = columnNames;\n    if (!_.find(tableData.columns, ['text', this.panel.tableColumn])) {\n      if (this.tableColumnOptions.length === 1) {\n        this.panel.tableColumn = this.tableColumnOptions[0];\n      } else {\n        this.panel.tableColumn = _.find(tableData.columns, (col) => {\n          return col.type !== 'time';\n        }).text;\n      }\n    }\n\n    tableData.rows.forEach((row) => {\n      const dataPoint = {};\n      row.forEach((value, columnIndex) => {\n        const key = columnNames[columnIndex];\n        dataPoint[key] = value;\n      });\n      dataPoints.push(dataPoint);\n    });\n\n    return dataPoints;\n  }\n  \n  setTableValues(tableData, data) {\n    if (!tableData || tableData.length === 0) {\n      return;\n    }\n\n    if (tableData[0].length === 0 || tableData[0][0][this.panel.tableColumn] === undefined) {\n      return;\n    }\n\n    const datapoint = tableData[0][0];\n    data.value = datapoint[this.panel.tableColumn];\n\n    if (_.isString(data.value)) {\n      data.valueFormatted = _.escape(data.value);\n      data.value = 0;\n      data.valueRounded = 0;\n    } else {\n      const decimalInfo = this.getDecimalsForValue(data.value);\n      const formatFunc = kbn.valueFormats[this.panel.format];\n      data.valueFormatted = formatFunc(datapoint[this.panel.tableColumn], decimalInfo.decimals, decimalInfo.scaledDecimals);\n      data.valueRounded = kbn.roundValue(data.value, this.panel.decimals || 0);\n    }\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n\n    if (this.series.length > 1) {\n      const error = new Error();\n      error.message = 'Multiple Series Error';\n      error.data = `Metric query returns ${this.series.length} series. `\n        + 'Thermometer Panel expects a single series.\\n\\nResponse:\\n'\n        + JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length === 1) {\n      let lastPoint = _.last(this.series[0].datapoints);\n      let lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.valueName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else if (this.panel.valueName === 'last_time') {\n        let formatFunc = kbn.valueFormats[this.panel.format];\n        data.value = lastPoint[1];\n        data.valueRounded = data.value;\n        data.valueFormatted = formatFunc(data.value, 0, 0);\n      } else {\n        data.value = this.series[0].stats[this.panel.valueName];\n        data.flotpairs = this.series[0].flotpairs;\n\n        let decimalInfo = this.getDecimalsForValue(data.value);\n        let formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n    }\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return {\n        decimals: this.panel.decimals,\n        scaledDecimals: null\n      };\n    }\n\n    const delta = value / 2;\n    let dec = -Math.floor(Math.log(delta) / Math.LN10);\n    const magn = Math.pow(10, -dec);\n    const norm = delta / magn; // norm is between 1.0 and 10.0\n    let size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) { dec = 0; }\n\n    const decimals = Math.max(0, dec);\n    const result = {\n      decimals: decimals,\n      scaledDecimals: decimals - Math.floor(Math.log(size) / Math.LN10) + 2\n    };\n\n    return result;\n  }\n\n  formatValue(value) {\n    const decimalInfo = this.getDecimalsForValue(value);\n    const formatFunc = kbn.valueFormats[this.panel.format];\n    if (formatFunc) {\n      return formatFunc(value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n    }\n    return value;\n  }\n\n  onColorChange(panelColorIndex) {\n    return (color) => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n  getColor() {\n    const value = this.data.value;\n    const thresholds = this.panel.thresholds.split(',');\n\n    if (!_.isFinite(value)) {\n      return null;\n    }\n    for (let i = thresholds.length; i > 0; i--) {\n      if (value >= thresholds[i-1]) {\n        return this.panel.colors[i];\n      }\n    }\n    return _.first(this.panel.colors);\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n}\n\nThermometerCtrl.templateUrl = 'module.html';\n"]}
